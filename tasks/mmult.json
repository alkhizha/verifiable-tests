{
  "name" : "mmult",
  "description" : "The program should multiply matrices a and b and save the result in matrix c.",
  "precondition" : "0 < N && 0 < M && 0 < L && fixVars(a,b,n,m,l,A,B,N,M,L)",
  "postcondition" : "rowsDone(A, B, c, N, M, L)",
  "loops": [
    {
      "invariant": "0 < M && 0 < L && 0 <= i <= N && rowsDone(A,B,c,i,M,L) && fixVars(a,b,n,m,l,A,B,N,M,L)",
      "variant": "N - i"
    },
    {
      "invariant": "0 < L && 0 < M && 0 <= i < N && 0 <= j <= M && rowsDone(A,B,c,i,M,L) && rowProgress(A,B,c,i,j,L) && fixVars(a,b,n,m,l,A,B,N,M,L)",
      "variant": "M - j"
    },
    {
      "invariant": "0 < L && 0 < M && 0 <= i < N && 0 <= j < M && 0 <= k <= L && rowsDone(A,B,c,i,M,L) && rowProgress(A,B,c,i,j,L) && c[i][j] = rowOnCol(A,B,i,j,k) && fixVars(a,b,n,m,l,A,B,N,M,L)",
      "variant": "L - k"
    }
  ],
  "shorthands": [
    {
      "name": "fixVars",
      "args": ["a", "b", "n", "m", "l", "A", "B", "N", "M", "L"],
      "definition": "n, m, l = N, M, L && eqMatr(a, A, N, L) && eqMatr(b, B, L, M)"
    },
    {
      "name": "eqMatr",
      "args": ["m1", "m2", "rows", "cols"],
      "definition": "(A i : 0 <= i < rows : (A j : 0 <= j < cols : m1[i][j] = m2[i][j]))"
    },
    {
      "name": "rowsDone",
      "args": ["m1", "m2", "res", "rows", "cols", "intermSize"],
      "definition": "(A i : 0 <= i < rows : rowProgress(m1, m2, res, i, cols, intermSize))"
    },
    {
      "name": "rowProgress",
      "args": ["m1", "m2", "res", "row", "cols", "intermSize"],
      "definition": "(A col : 0 <= col < cols : res[row][col] = rowOnCol(m1, m2, row, col, intermSize))"
    },
    {
      "name": "rowOnCol",
      "args": ["m1", "m2", "row", "col", "to"],
      "definition": "(SUM k : 0 <= k < to : m1[row][k] * m2[k][col])"
    }
  ],
  "axioms" : ["ROW_ON_COL_DOTPROD", "MULT_COMMUT"]
}
